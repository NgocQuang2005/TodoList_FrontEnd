// src/utils/errorHandler.js
import { ERROR_MESSAGES } from '@/constants';

/**
 * X·ª≠ l√Ω l·ªói API v√† tr·∫£ v·ªÅ message ph√π h·ª£p
 * @param {Error} error - L·ªói t·ª´ API
 * @returns {string} - Message l·ªói ƒë·ªÉ hi·ªÉn th·ªã
 */
export function handleApiError(error) {
  if (!error.response) {
    return ERROR_MESSAGES.NETWORK_ERROR;
  }

  const { status, data } = error.response;

  switch (status) {
    case 400:
      return data?.message || ERROR_MESSAGES.VALIDATION_ERROR;
    case 401:
      return ERROR_MESSAGES.UNAUTHORIZED;
    case 403:
      return 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.';
    case 404:
      return 'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu y√™u c·∫ßu.';
    case 422:
      return data?.message || ERROR_MESSAGES.VALIDATION_ERROR;
    case 500:
      return ERROR_MESSAGES.SERVER_ERROR;
    default:
      return data?.message || ERROR_MESSAGES.SERVER_ERROR;
  }
}

/**
 * X·ª≠ l√Ω l·ªói validation v√† format th√†nh object
 * @param {Error} error - L·ªói validation
 * @returns {Object} - Object ch·ª©a l·ªói theo field
 */
export function handleValidationError(error) {
  if (error.response?.data?.errors) {
    return error.response.data.errors;
  }
  
  if (error.response?.data?.message) {
    return { general: error.response.data.message };
  }
  
  return { general: ERROR_MESSAGES.VALIDATION_ERROR };
}

/**
 * Log l·ªói trong development mode
 * @param {string} context - Context c·ªßa l·ªói
 * @param {Error} error - L·ªói c·∫ßn log
 */
export function logError(context, error) {
  if (import.meta.env.VITE_DEBUG === 'true') {
    console.group(`üö® Error in ${context}`);
    console.error('Error:', error);
    console.error('Stack:', error.stack);
    if (error.response) {
      console.error('Response:', error.response);
    }
    console.groupEnd();
  }
}

/**
 * T·∫°o error object chu·∫©n
 * @param {string} message - Message l·ªói
 * @param {string} code - M√£ l·ªói
 * @param {Object} details - Chi ti·∫øt l·ªói
 * @returns {Object} - Error object chu·∫©n
 */
export function createError(message, code = 'UNKNOWN_ERROR', details = null) {
  return {
    message,
    code,
    details,
    timestamp: new Date().toISOString()
  };
}